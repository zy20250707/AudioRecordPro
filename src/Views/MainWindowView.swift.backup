import Cocoa
import Foundation

// AudioProcessInfo 类型已在 CoreAudioProcessTapRecorder.swift 中定义

/// 主窗口视图 - 分割视图实现
class MainWindowView: NSView, NSTableViewDataSource, NSTableViewDelegate {
    
    // MARK: - Split Layout
    private let splitView = NSSplitView()
    private let sidebarView = NSView()
    private let contentView = NSView()
    
    // MARK: - Sidebar Controls
    private let systemHeader = NSTextField()
    private let micHeader = NSTextField()
    private let appsHeader = NSTextField()
    private let systemCheckbox = NSButton(checkboxWithTitle: "系统音频输出", target: nil, action: nil)
    private let microphoneCheckbox = NSButton(checkboxWithTitle: "麦克风", target: nil, action: nil)
    private let appsScroll = NSScrollView()
    private let appsTable = NSTableView()
    private let appsColumn = NSTableColumn(identifier: NSUserInterfaceItemIdentifier("app"))
    private var availableProcesses: [AudioProcessInfo] = []
    
    // MARK: - Content (Right)
    private let containerStack = NSStackView()
    private let welcomeLabel = NSTextField()
    private let statusLabel = NSTextField()
    private let timerLabel = NSTextField()
    private let recordButton = NSButton()
    private let tracksStack = NSStackView()
    private let bigTimerLabel = NSTextField()
    private let bigButtonContainer = NSView()
    private let bigRecordButton = NSButton()
    private let statusBarView = NSView()
    private let statusBarText = NSTextField()
    private var bigRecordButtonWidthConstraint: NSLayoutConstraint?
    private var bigRecordButtonHeightConstraint: NSLayoutConstraint?
    private let outerRingLayer = CAShapeLayer()
    
    // MARK: - Properties
    weak var delegate: MainWindowViewDelegate?
    private var currentRecordingState: RecordingState = .idle
    private let bigRecordInnerSquare = CALayer()
    
    // MARK: - Initialization
    override init(frame frameRect: NSRect) {
        super.init(frame: frameRect)
        setupView()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupView()
    }
    
    private func setupView() {
        // 背景色
        wantsLayer = true
        layer?.backgroundColor = NSColor.windowBackgroundColor.cgColor
        
        // SplitView 基本属性
        splitView.isVertical = true
        splitView.dividerStyle = .thin
        splitView.translatesAutoresizingMaskIntoConstraints = false
        addSubview(splitView)
        
        // 左侧与右侧容器
        sidebarView.wantsLayer = true
        sidebarView.layer?.backgroundColor = NSColor.controlBackgroundColor.cgColor
        sidebarView.translatesAutoresizingMaskIntoConstraints = false
        contentView.wantsLayer = true
        contentView.layer?.backgroundColor = NSColor.white.cgColor
        contentView.translatesAutoresizingMaskIntoConstraints = false
        
        splitView.addArrangedSubview(sidebarView)
        splitView.addArrangedSubview(contentView)
        
        // 侧边栏内容
        setupSidebar()
        
        // 右侧内容（仅保留新版区域）
        // 不再添加旧版标题/小计时器区域
        setupTracksArea()
        setupBottomControls()
        setupStatusBar()
        
        // SplitView 约束
        NSLayoutConstraint.activate([
            splitView.topAnchor.constraint(equalTo: topAnchor),
            splitView.leadingAnchor.constraint(equalTo: leadingAnchor),
            splitView.trailingAnchor.constraint(equalTo: trailingAnchor),
            splitView.bottomAnchor.constraint(equalTo: bottomAnchor),
            sidebarView.widthAnchor.constraint(equalToConstant: 300)
        ])
    }
    
    private func setupSidebar() {
        func styleHeader(_ tf: NSTextField, _ title: String) {
            tf.stringValue = title
            tf.isBordered = false
            tf.isEditable = false
            tf.backgroundColor = .clear
            tf.font = NSFont.systemFont(ofSize: 13, weight: .semibold)
            tf.textColor = NSColor.secondaryLabelColor
            tf.translatesAutoresizingMaskIntoConstraints = false
            sidebarView.addSubview(tf)
        }
        styleHeader(systemHeader, "系统音频输出")
        styleHeader(micHeader, "麦克风")
        styleHeader(appsHeader, "已打开的应用")
        
        systemCheckbox.target = self
        systemCheckbox.action = #selector(sourceCheckboxChanged)
        systemCheckbox.translatesAutoresizingMaskIntoConstraints = false
        microphoneCheckbox.translatesAutoresizingMaskIntoConstraints = false
        microphoneCheckbox.target = self
        microphoneCheckbox.action = #selector(sourceCheckboxChanged)
        sidebarView.addSubview(systemCheckbox)
        sidebarView.addSubview(microphoneCheckbox)
        
        appsColumn.title = "Apps"
        appsTable.addTableColumn(appsColumn)
        appsTable.headerView = nil
        appsTable.rowSizeStyle = .default
        appsTable.usesAlternatingRowBackgroundColors = true
        appsTable.dataSource = self
        appsTable.delegate = self
        appsTable.rowHeight = 28
        appsTable.allowsMultipleSelection = true
        appsTable.translatesAutoresizingMaskIntoConstraints = false
        
        appsScroll.documentView = appsTable
        appsScroll.hasVerticalScroller = true
        appsScroll.translatesAutoresizingMaskIntoConstraints = false
        sidebarView.addSubview(appsScroll)
        
        NSLayoutConstraint.activate([
            systemHeader.topAnchor.constraint(equalTo: sidebarView.topAnchor, constant: 16),
            systemHeader.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 16),
            
            systemCheckbox.topAnchor.constraint(equalTo: systemHeader.bottomAnchor, constant: 8),
            systemCheckbox.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 16),
            
            micHeader.topAnchor.constraint(equalTo: systemCheckbox.bottomAnchor, constant: 18),
            micHeader.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 16),
            
            microphoneCheckbox.topAnchor.constraint(equalTo: micHeader.bottomAnchor, constant: 8),
            microphoneCheckbox.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 16),
            
            appsHeader.topAnchor.constraint(equalTo: microphoneCheckbox.bottomAnchor, constant: 18),
            appsHeader.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 16),
            
            appsScroll.topAnchor.constraint(equalTo: appsHeader.bottomAnchor, constant: 8),
            appsScroll.leadingAnchor.constraint(equalTo: sidebarView.leadingAnchor, constant: 12),
            appsScroll.trailingAnchor.constraint(equalTo: sidebarView.trailingAnchor, constant: -12),
            appsScroll.bottomAnchor.constraint(equalTo: sidebarView.bottomAnchor, constant: -12)
        ])
    }
    
    // 旧版内容区域已移除

    private func setupTracksArea() {
        tracksStack.orientation = .vertical
        tracksStack.spacing = 12
        tracksStack.alignment = .leading
        tracksStack.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(tracksStack)

        func addPlaceholderTrack(_ title: String) {
            let row = NSView()
            row.translatesAutoresizingMaskIntoConstraints = false

            let icon = NSImageView()
            icon.image = NSImage(named: NSImage.touchBarAudioInputTemplateName)
            icon.translatesAutoresizingMaskIntoConstraints = false
            row.addSubview(icon)

            let label = NSTextField(labelWithString: title)
            label.font = NSFont.systemFont(ofSize: 14, weight: .semibold)
            label.alignment = .left
            label.translatesAutoresizingMaskIntoConstraints = false
            row.addSubview(label)

            let meter = LevelMeterView()
            meter.translatesAutoresizingMaskIntoConstraints = false
            row.addSubview(meter)

            NSLayoutConstraint.activate([
                icon.leadingAnchor.constraint(equalTo: row.leadingAnchor, constant: 8),
                icon.topAnchor.constraint(equalTo: row.topAnchor, constant: 8),
                icon.widthAnchor.constraint(equalToConstant: 16),
                icon.heightAnchor.constraint(equalToConstant: 16),

                label.leadingAnchor.constraint(equalTo: icon.trailingAnchor, constant: 8),
                label.centerYAnchor.constraint(equalTo: icon.centerYAnchor),
                label.trailingAnchor.constraint(lessThanOrEqualTo: row.trailingAnchor, constant: -8),

                meter.leadingAnchor.constraint(equalTo: row.leadingAnchor, constant: 8),
                meter.topAnchor.constraint(equalTo: icon.bottomAnchor, constant: 8),
                meter.trailingAnchor.constraint(equalTo: row.trailingAnchor, constant: -8),
                meter.heightAnchor.constraint(equalToConstant: 120),
                meter.bottomAnchor.constraint(equalTo: row.bottomAnchor, constant: -8)
            ])

            tracksStack.addArrangedSubview(row)
        }

        // 初始化根据左侧选择生成轨道
        func seedInitial() {
            if systemCheckbox.state == .on { addPlaceholderTrack("系统扬声器") }
            if microphoneCheckbox.state == .on { addPlaceholderTrack("麦克风") }
            let selectedRows = appsTable.selectedRowIndexes
            for idx in selectedRows { if idx >= 0 && idx < availableProcesses.count { addPlaceholderTrack(availableProcesses[idx].name) } }
        }
        seedInitial()

        NSLayoutConstraint.activate([
            tracksStack.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 24),
            tracksStack.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            tracksStack.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20)
        ])
    }

    private func setupBottomControls() {
        // 大计时器
        bigTimerLabel.stringValue = "00:00.00"
        bigTimerLabel.font = NSFont.monospacedDigitSystemFont(ofSize: 28, weight: .bold)
        bigTimerLabel.textColor = NSColor.secondaryLabelColor
        bigTimerLabel.backgroundColor = .clear
        bigTimerLabel.isBordered = false
        bigTimerLabel.isEditable = false
        bigTimerLabel.alignment = .left
        bigTimerLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(bigTimerLabel)

        // 大录音按钮容器（固定布局+外部灰色描边）
        bigButtonContainer.wantsLayer = true
        bigButtonContainer.layer?.backgroundColor = NSColor.clear.cgColor
        bigButtonContainer.layer?.masksToBounds = false
        bigButtonContainer.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(bigButtonContainer)

        // 外环（灰色描边，留出与内部按钮的间距）
        outerRingLayer.fillColor = NSColor.clear.cgColor
        outerRingLayer.strokeColor = NSColor(calibratedWhite: 0.0, alpha: 0.45).cgColor
        outerRingLayer.lineWidth = 8
        outerRingLayer.contentsScale = NSScreen.main?.backingScaleFactor ?? 2.0
        bigButtonContainer.layer?.addSublayer(outerRingLayer)

        // 大录音按钮（内部形状，圆↔方切换）
        bigRecordButton.title = ""
        bigRecordButton.isBordered = false
        bigRecordButton.wantsLayer = true
        bigRecordButton.layer?.backgroundColor = NSColor.systemRed.cgColor
        bigRecordButton.layer?.cornerRadius = 32
        bigRecordButton.target = self
        bigRecordButton.action = #selector(recordButtonClicked)
        bigRecordButton.translatesAutoresizingMaskIntoConstraints = false
        bigButtonContainer.addSubview(bigRecordButton)

        // 录制中视觉：内部白色方块（表示停止）
        if let layer = bigRecordButton.layer {
            bigRecordInnerSquare.backgroundColor = NSColor.white.cgColor
            bigRecordInnerSquare.cornerRadius = 4
            bigRecordInnerSquare.isHidden = true
            // 关闭隐式动画，避免约束动画时方块出现闪烁放大
            bigRecordInnerSquare.actions = [
                "bounds": NSNull(),
                "position": NSNull(),
                "hidden": NSNull(),
                "contents": NSNull()
            ]
            // 初始尺寸，后续在 layout 调整为居中
            bigRecordInnerSquare.frame = CGRect(x: (layer.bounds.width - 22) / 2,
                                                y: (layer.bounds.height - 22) / 2,
                                                width: 22,
                                                height: 22)
            layer.addSublayer(bigRecordInnerSquare)
        }

        // 布局：容器固定大小，内部按钮固定大小与居中。计时器与容器对齐，整体位置稳定
        let containerW = bigButtonContainer.widthAnchor.constraint(equalToConstant: 84)
        let containerH = bigButtonContainer.heightAnchor.constraint(equalToConstant: 84)
        let w = bigRecordButton.widthAnchor.constraint(equalToConstant: 64)
        let h = bigRecordButton.heightAnchor.constraint(equalToConstant: 64)
        bigRecordButtonWidthConstraint = w
        bigRecordButtonHeightConstraint = h
        NSLayoutConstraint.activate([
            bigButtonContainer.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),
            bigButtonContainer.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -40),
            containerW,
            containerH,

            bigRecordButton.centerXAnchor.constraint(equalTo: bigButtonContainer.centerXAnchor),
            bigRecordButton.centerYAnchor.constraint(equalTo: bigButtonContainer.centerYAnchor),
            w,
            h,

            bigTimerLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            bigTimerLabel.centerYAnchor.constraint(equalTo: bigButtonContainer.centerYAnchor)
        ])
    }

    private func setupStatusBar() {
        statusBarView.wantsLayer = true
        statusBarView.layer?.backgroundColor = NSColor(white: 0.96, alpha: 1).cgColor
        statusBarView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(statusBarView)

        statusBarText.stringValue = "准备就绪"
        statusBarText.font = NSFont.systemFont(ofSize: 12)
        statusBarText.textColor = NSColor.secondaryLabelColor
        statusBarText.isBordered = false
        statusBarText.isEditable = false
        statusBarText.backgroundColor = .clear
        statusBarText.alignment = .left
        statusBarText.translatesAutoresizingMaskIntoConstraints = false
        statusBarView.addSubview(statusBarText)

        NSLayoutConstraint.activate([
            statusBarView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            statusBarView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            statusBarView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            statusBarView.heightAnchor.constraint(equalToConstant: 28),

            statusBarText.leadingAnchor.constraint(equalTo: statusBarView.leadingAnchor, constant: 12),
            statusBarText.centerYAnchor.constraint(equalTo: statusBarView.centerYAnchor)
        ])
    }
    
    // MARK: - Public Methods (MainViewController 期望的方法)
    func updateStatus(_ status: String) {
        // 状态写到底部状态栏
        statusBarText.stringValue = status
    }
    
    func updateTimer(_ timeString: String) {
        // 时间写到大计时器
        bigTimerLabel.stringValue = timeString
    }
    
    func updateLevel(_ level: Float) {
        // 将电平分发到右侧所有轨道中的 LevelMeterView
        for row in tracksStack.arrangedSubviews {
            for sub in row.subviews {
                if let meter = sub as? LevelMeterView {
                    meter.updateLevel(level)
                }
            }
        }
    }
    
    func updateMode(_ mode: AudioUtils.RecordingMode) {
        // 预留：右侧可加入模式显示
    }
    
    func updateRecordingState(_ state: RecordingState) {
        currentRecordingState = state
        switch state {
        case .idle:
            recordButton.title = "开始录音"
            recordButton.isEnabled = true
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemRed.cgColor
            bigRecordButton.layer?.cornerRadius = 32
        case .preparing:
            recordButton.title = "准备中..."
            recordButton.isEnabled = false
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemRed.cgColor
            bigRecordButton.layer?.cornerRadius = 32
        case .recording:
            recordButton.title = "停止录音"
            recordButton.isEnabled = true
            // 外形切换为方形停播样式
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemGray.cgColor
            bigRecordButton.layer?.cornerRadius = 10
        case .stopping:
            recordButton.title = "停止中..."
            recordButton.isEnabled = false
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemGray.cgColor
            bigRecordButton.layer?.cornerRadius = 10
        case .playing:
            recordButton.title = "播放中..."
            recordButton.isEnabled = false
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemRed.cgColor
            bigRecordButton.layer?.cornerRadius = 32
        case .error:
            recordButton.title = "开始录音"
            recordButton.isEnabled = true
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.backgroundColor = NSColor.systemRed.cgColor
            bigRecordButton.layer?.cornerRadius = 32
        }
    }
    
    func debugButtonPosition() {}
    
    // MARK: - Actions
    @objc private func recordButtonClicked() {
        switch currentRecordingState {
        case .idle, .error:
            // 立即给出视觉反馈
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.cornerRadius = 10
            delegate?.mainWindowViewDidStartRecording(self)
        case .preparing, .recording:
            bigRecordInnerSquare.isHidden = true
            bigRecordButton.layer?.cornerRadius = 10
            delegate?.mainWindowViewDidStopRecording(self)
        case .stopping, .playing:
            break
        }
    }

    @objc private func sourceCheckboxChanged() {
        rebuildTracks()
    }

    private func rebuildTracks() {
        // 清空现有轨道
        for v in tracksStack.arrangedSubviews {
            tracksStack.removeArrangedSubview(v)
            v.removeFromSuperview()
        }
        // 依据勾选与选择重建
        if systemCheckbox.state == .on { addTrackRow(title: "系统扬声器") }
        if microphoneCheckbox.state == .on { addTrackRow(title: "麦克风") }
        let selected = appsTable.selectedRowIndexes
        for idx in selected { if idx >= 0 && idx < availableProcesses.count { addTrackRow(title: availableProcesses[idx].name) } }
    }

    private func addTrackRow(title: String) {
        let row = NSView()
        row.translatesAutoresizingMaskIntoConstraints = false
        let icon = NSImageView()
        icon.image = NSImage(named: NSImage.touchBarAudioInputTemplateName)
        icon.translatesAutoresizingMaskIntoConstraints = false
        row.addSubview(icon)
        let label = NSTextField(labelWithString: title)
        label.font = NSFont.systemFont(ofSize: 14, weight: .semibold)
        label.alignment = .left
        label.translatesAutoresizingMaskIntoConstraints = false
        row.addSubview(label)
        let meter = LevelMeterView()
        meter.translatesAutoresizingMaskIntoConstraints = false
        row.addSubview(meter)
        NSLayoutConstraint.activate([
            icon.leadingAnchor.constraint(equalTo: row.leadingAnchor, constant: 8),
            icon.topAnchor.constraint(equalTo: row.topAnchor, constant: 8),
            icon.widthAnchor.constraint(equalToConstant: 16),
            icon.heightAnchor.constraint(equalToConstant: 16),
            label.leadingAnchor.constraint(equalTo: icon.trailingAnchor, constant: 8),
            label.centerYAnchor.constraint(equalTo: icon.centerYAnchor),
            label.trailingAnchor.constraint(lessThanOrEqualTo: row.trailingAnchor, constant: -8),
            meter.leadingAnchor.constraint(equalTo: row.leadingAnchor, constant: 8),
            meter.topAnchor.constraint(equalTo: icon.bottomAnchor, constant: 8),
            meter.trailingAnchor.constraint(equalTo: row.trailingAnchor, constant: -8),
            meter.heightAnchor.constraint(equalToConstant: 120),
            meter.bottomAnchor.constraint(equalTo: row.bottomAnchor, constant: -8)
        ])
        tracksStack.addArrangedSubview(row)
    }
    
    // MARK: - Table DataSource / Delegate
    func numberOfRows(in tableView: NSTableView) -> Int {
        return availableProcesses.count
    }
    
    func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -> NSView? {
        let id = NSUserInterfaceItemIdentifier("AppCell")
        let cell: NSTableCellView
        if let reused = tableView.makeView(withIdentifier: id, owner: self) as? NSTableCellView {
            cell = reused
        } else {
            cell = NSTableCellView()
            cell.identifier = id
            let imageView = NSImageView()
            imageView.translatesAutoresizingMaskIntoConstraints = false
            imageView.image = NSImage(named: NSImage.multipleDocumentsName)
            imageView.wantsLayer = true
            imageView.layer?.cornerRadius = 4
            cell.addSubview(imageView)
            let text = NSTextField(labelWithString: "")
            text.translatesAutoresizingMaskIntoConstraints = false
            cell.addSubview(text)
            cell.imageView = imageView
            cell.textField = text
            NSLayoutConstraint.activate([
                imageView.leadingAnchor.constraint(equalTo: cell.leadingAnchor, constant: 8),
                imageView.centerYAnchor.constraint(equalTo: cell.centerYAnchor),
                imageView.widthAnchor.constraint(equalToConstant: 18),
                imageView.heightAnchor.constraint(equalToConstant: 18),
                text.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 8),
                text.centerYAnchor.constraint(equalTo: cell.centerYAnchor),
                text.trailingAnchor.constraint(equalTo: cell.trailingAnchor, constant: -8)
            ])
        }
        if row < availableProcesses.count {
            let process = availableProcesses[row]
            cell.textField?.stringValue = "\(process.name) (PID: \(process.pid))"
        }
        return cell
    }

    func tableViewSelectionDidChange(_ notification: Notification) {
        updateTracksDisplay()
        // 同步所选进程PID给上层控制器
        let selectedRows = appsTable.selectedRowIndexes
        var pids: [pid_t] = []
        for index in selectedRows {
            if index < availableProcesses.count {
                pids.append(availableProcesses[index].pid)
            }
        }
        delegate?.mainWindowViewDidSelectProcesses(self, pids: pids)
    }

    override func layout() {
        super.layout()
        // 更新内方块（若启用）的位置与外环路径，保持布局不变
        if let layer = bigRecordButton.layer {
            let size: CGFloat = 22
            bigRecordInnerSquare.frame = CGRect(x: (layer.bounds.width - size) / 2,
                                                y: (layer.bounds.height - size) / 2,
                                                width: size,
                                                height: size)
        }
        // 外环路径：以容器中间为圆心，稍大于内部按钮，保留间距
        let bounds = bigButtonContainer.bounds
        if bounds.width > 0 && bounds.height > 0 {
            outerRingLayer.frame = bounds
            let center = CGPoint(x: bounds.midX, y: bounds.midY)
            let radius = min(bounds.width, bounds.height) / 2 - outerRingLayer.lineWidth / 2 - 1
            let path = NSBezierPath()
            path.appendArc(withCenter: NSPoint(x: center.x, y: center.y), radius: radius, startAngle: 0, endAngle: 360)
            // 构造 CGPath 兼容旧系统
            let cgPath = CGMutablePath()
            cgPath.addArc(center: CGPoint(x: center.x, y: center.y), radius: radius, startAngle: 0, endAngle: CGFloat.pi * 2, clockwise: false)
            outerRingLayer.path = cgPath
        }
    }

    // 保留空实现（占位，后续如需恢复尺寸动画可复用）
    private func resizeBigRecordButton(to size: CGFloat) { }
}

// MARK: - Delegate Protocol
protocol MainWindowViewDelegate: AnyObject {
    func mainWindowViewDidSwitchMode(_ view: MainWindowView)
    func mainWindowViewDidStartRecording(_ view: MainWindowView)
    func mainWindowViewDidStopRecording(_ view: MainWindowView)
    func mainWindowViewDidPlayRecording(_ view: MainWindowView)
    func mainWindowViewDidDownloadRecording(_ view: MainWindowView)
    func mainWindowViewDidChangeFormat(_ view: MainWindowView, format: String)
    func mainWindowViewDidOpenPermissions(_ view: MainWindowView)
    func mainWindowViewDidStopPlayback(_ view: MainWindowView)
    func mainWindowViewDidSelectProcesses(_ view: MainWindowView, pids: [pid_t])
}

// MARK: - Process List Management
extension MainWindowView {
    /// 更新进程列表
    func updateProcessList(_ processes: [AudioProcessInfo]) {
        availableProcesses = processes
        appsTable.reloadData()
    }
    
    /// 更新轨道显示
    func updateTracksDisplay() {
        // 清除现有轨道
        tracksStack.arrangedSubviews.forEach { $0.removeFromSuperview() }
        
        // 根据选择添加轨道
        if systemCheckbox.state == .on {
            addTrackRow(icon: "🔊", title: "系统音频输出", isActive: true)
        }
        if microphoneCheckbox.state == .on {
            addTrackRow(icon: "🎤", title: "麦克风", isActive: true)
        }
        
        // 添加选中的进程轨道
        let selectedRows = appsTable.selectedRowIndexes
        for index in selectedRows {
            if index < availableProcesses.count {
                let process = availableProcesses[index]
                addTrackRow(icon: "📱", title: process.name, isActive: true)
            }
        }
    }
    
    /// 添加轨道行
    private func addTrackRow(icon: String, title: String, isActive: Bool) {
        let trackView = NSView()
        trackView.translatesAutoresizingMaskIntoConstraints = false
        
        let iconLabel = NSTextField()
        iconLabel.stringValue = icon
        iconLabel.isBordered = false
        iconLabel.isEditable = false
        iconLabel.backgroundColor = .clear
        iconLabel.font = NSFont.systemFont(ofSize: 16)
        iconLabel.translatesAutoresizingMaskIntoConstraints = false
        
        let titleLabel = NSTextField()
        titleLabel.stringValue = title
        titleLabel.isBordered = false
        titleLabel.isEditable = false
        titleLabel.backgroundColor = .clear
        titleLabel.font = NSFont.systemFont(ofSize: 13)
        titleLabel.textColor = .labelColor
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        let levelMeter = LevelMeterView()
        levelMeter.translatesAutoresizingMaskIntoConstraints = false
        
        trackView.addSubview(iconLabel)
        trackView.addSubview(titleLabel)
        trackView.addSubview(levelMeter)
        
        NSLayoutConstraint.activate([
            trackView.heightAnchor.constraint(equalToConstant: 40),
            
            iconLabel.leadingAnchor.constraint(equalTo: trackView.leadingAnchor, constant: 16),
            iconLabel.centerYAnchor.constraint(equalTo: trackView.centerYAnchor),
            
            titleLabel.leadingAnchor.constraint(equalTo: iconLabel.trailingAnchor, constant: 12),
            titleLabel.centerYAnchor.constraint(equalTo: trackView.centerYAnchor),
            
            levelMeter.leadingAnchor.constraint(equalTo: titleLabel.trailingAnchor, constant: 16),
            levelMeter.trailingAnchor.constraint(equalTo: trackView.trailingAnchor, constant: -16),
            levelMeter.centerYAnchor.constraint(equalTo: trackView.centerYAnchor),
            levelMeter.heightAnchor.constraint(equalToConstant: 20)
        ])
        
        tracksStack.addArrangedSubview(trackView)
    }
}

// MARK: - Public Query APIs
extension MainWindowView {
    func isSystemAudioSourceSelected() -> Bool { systemCheckbox.state == .on }
    func isMicrophoneSourceSelected() -> Bool { microphoneCheckbox.state == .on }
}
